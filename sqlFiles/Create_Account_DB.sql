drop table if exists Account;
drop table if exists User;
drop table if exists Role;
drop table if exists Permission;
drop table if exists ACCOUNT_ROLE_MAP;
drop table if exists ROLE_PERMISSION_MAP;

create table Account (
	ACC_ID char(100) NOT NULL,
	USER_ID char(10),
	ACC_PWD char(100) NOT NULL,
	Primary Key (ACC_ID)
);

CREATE TABLE USER (
	USER_ID CHAR(10) not null,
	FNAME CHAR(100) NOT NULL,
	LNAME CHAR(100),
	EMAIL CHAR(100),
	MOBILE CHAR(12),
	BDATE DATE,
	ADDRESS TEXT,
	PRIMARY KEY (USER_ID)
);

CREATE TABLE ROLE (
	ROLE_ID INT NOT NULL AUTO_INCREMENT,
	ROLE_NAME CHAR(255) NOT NULL COMMENT 'Roles: Lecturer, Student, AAOAdmin, SysAdmin, etc',
	ROLE_DESC TEXT,
	PRIMARY KEY (ROLE_ID)
);

CREATE TABLE ACCOUNT_ROLE_MAP (
	ACC_ROLE_ID INT NOT NULL AUTO_INCREMENT,
	ACC_ID CHAR(100),
	ROLE_ID INT,
	CREATOR_ACC_ROLE_ID CHAR(100),
	ACC_ROLE_GRANTED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY(ACC_ROLE_ID)
)
;

CREATE TABLE ROLE_PERMISSION_MAP(
	ROLE_PERMISSION_MAP_ID INT NOT NULL AUTO_INCREMENT,
	ROLE_ID INT DEFAULT 0,
	PERMISSION_ID INT,
	ACC_ID CHAR(100),
	ROLE_PERMISSION_GRANTED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY(ROLE_PERMISSION_MAP_ID)
);

CREATE TABLE PERMISSION(
	PERMISSION_ID INT NOT NULL AUTO_INCREMENT,
	PERMISSION_NAME CHAR(255) NOT NULL,
	PERMISSION_VALUE BOOLEAN NOT NULL,
	PERMISSION_DESC TEXT,
	PRIMARY KEY(PERMISSION_ID)
);

ALTER TABLE ACCOUNT ADD CONSTRAINT FK_OWNER_OF_ACCOUNTS FOREIGN KEY (USER_ID) REFERENCES USER(USER_ID) on delete restrict on update restrict;

ALTER TABLE ACCOUNT_ROLE_MAP ADD CONSTRAINT FK_ACCOUNT_OF_ROLES FOREIGN KEY(ACC_ID) REFERENCES ACCOUNT(ACC_ID) on delete restrict on update restrict;

ALTER TABLE ACCOUNT_ROLE_MAP ADD CONSTRAINT FK_CREATOR_OF_ACCOUNT_TO_ROLE_MAPPING FOREIGN KEY (CREATOR_ACC_ROLE_ID) REFERENCES ACCOUNT(ACC_ID) on delete restrict on update restrict;

ALTER TABLE ACCOUNT_ROLE_MAP ADD CONSTRAINT FK_ROLE_OF_ACCOUNTS FOREIGN KEY(ROLE_ID) REFERENCES ROLE(ROLE_ID) on delete restrict on update restrict;

ALTER TABLE ROLE_PERMISSION_MAP ADD CONSTRAINT FK_ROLE_OF_PERMISSION FOREIGN KEY(ROLE_ID) REFERENCES ROLE(ROLE_ID) on delete restrict on update restrict;

ALTER TABLE ROLE_PERMISSION_MAP ADD CONSTRAINT FK_PERMISSIONS_OF_ROLE FOREIGN KEY (PERMISSION_ID) REFERENCES PERMISSION(PERMISSION_ID) on delete restrict on update restrict;

ALTER TABLE ROLE_PERMISSION_MAP ADD CONSTRAINT FK_CREATOR_OF_PERMISSION_AND_ROLE_MAPPING FOREIGN KEY (ACC_ID) REFERENCES ACCOUNT(ACC_ID) on delete restrict on update restrict;
